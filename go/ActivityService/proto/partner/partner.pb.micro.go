// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: partner.proto

package partner

import (
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
	_ "google.golang.org/protobuf/types/known/structpb"
	math "math"
)

import (
	context "context"
	client "go-micro.dev/v5/client"
	server "go-micro.dev/v5/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for Partner service

type PartnerService interface {
	GetPartnerByName(ctx context.Context, in *GetPartnerByNameRequest, opts ...client.CallOption) (*GetPartnerByNameResponse, error)
	GetPartnerById(ctx context.Context, in *GetPartnerByIdRequest, opts ...client.CallOption) (*GetPartnerByIdResponse, error)
	CreatePartner(ctx context.Context, in *CreatePartnerRequest, opts ...client.CallOption) (*CreatePartnerResponse, error)
	UpdatePartner(ctx context.Context, in *UpdatePartnerRequest, opts ...client.CallOption) (*UpdatePartnerResponse, error)
	DeletePartner(ctx context.Context, in *DeletePartnerRequest, opts ...client.CallOption) (*DeletePartnerResponse, error)
	GetPartners(ctx context.Context, in *GetPartnersRequest, opts ...client.CallOption) (*GetPartnersResponse, error)
}

type partnerService struct {
	c    client.Client
	name string
}

func NewPartnerService(name string, c client.Client) PartnerService {
	return &partnerService{
		c:    c,
		name: name,
	}
}

func (c *partnerService) GetPartnerByName(ctx context.Context, in *GetPartnerByNameRequest, opts ...client.CallOption) (*GetPartnerByNameResponse, error) {
	req := c.c.NewRequest(c.name, "Partner.GetPartnerByName", in)
	out := new(GetPartnerByNameResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *partnerService) GetPartnerById(ctx context.Context, in *GetPartnerByIdRequest, opts ...client.CallOption) (*GetPartnerByIdResponse, error) {
	req := c.c.NewRequest(c.name, "Partner.GetPartnerById", in)
	out := new(GetPartnerByIdResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *partnerService) CreatePartner(ctx context.Context, in *CreatePartnerRequest, opts ...client.CallOption) (*CreatePartnerResponse, error) {
	req := c.c.NewRequest(c.name, "Partner.CreatePartner", in)
	out := new(CreatePartnerResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *partnerService) UpdatePartner(ctx context.Context, in *UpdatePartnerRequest, opts ...client.CallOption) (*UpdatePartnerResponse, error) {
	req := c.c.NewRequest(c.name, "Partner.UpdatePartner", in)
	out := new(UpdatePartnerResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *partnerService) DeletePartner(ctx context.Context, in *DeletePartnerRequest, opts ...client.CallOption) (*DeletePartnerResponse, error) {
	req := c.c.NewRequest(c.name, "Partner.DeletePartner", in)
	out := new(DeletePartnerResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *partnerService) GetPartners(ctx context.Context, in *GetPartnersRequest, opts ...client.CallOption) (*GetPartnersResponse, error) {
	req := c.c.NewRequest(c.name, "Partner.GetPartners", in)
	out := new(GetPartnersResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Partner service

type PartnerHandler interface {
	GetPartnerByName(context.Context, *GetPartnerByNameRequest, *GetPartnerByNameResponse) error
	GetPartnerById(context.Context, *GetPartnerByIdRequest, *GetPartnerByIdResponse) error
	CreatePartner(context.Context, *CreatePartnerRequest, *CreatePartnerResponse) error
	UpdatePartner(context.Context, *UpdatePartnerRequest, *UpdatePartnerResponse) error
	DeletePartner(context.Context, *DeletePartnerRequest, *DeletePartnerResponse) error
	GetPartners(context.Context, *GetPartnersRequest, *GetPartnersResponse) error
}

func RegisterPartnerHandler(s server.Server, hdlr PartnerHandler, opts ...server.HandlerOption) error {
	type partner interface {
		GetPartnerByName(ctx context.Context, in *GetPartnerByNameRequest, out *GetPartnerByNameResponse) error
		GetPartnerById(ctx context.Context, in *GetPartnerByIdRequest, out *GetPartnerByIdResponse) error
		CreatePartner(ctx context.Context, in *CreatePartnerRequest, out *CreatePartnerResponse) error
		UpdatePartner(ctx context.Context, in *UpdatePartnerRequest, out *UpdatePartnerResponse) error
		DeletePartner(ctx context.Context, in *DeletePartnerRequest, out *DeletePartnerResponse) error
		GetPartners(ctx context.Context, in *GetPartnersRequest, out *GetPartnersResponse) error
	}
	type Partner struct {
		partner
	}
	h := &partnerHandler{hdlr}
	return s.Handle(s.NewHandler(&Partner{h}, opts...))
}

type partnerHandler struct {
	PartnerHandler
}

func (h *partnerHandler) GetPartnerByName(ctx context.Context, in *GetPartnerByNameRequest, out *GetPartnerByNameResponse) error {
	return h.PartnerHandler.GetPartnerByName(ctx, in, out)
}

func (h *partnerHandler) GetPartnerById(ctx context.Context, in *GetPartnerByIdRequest, out *GetPartnerByIdResponse) error {
	return h.PartnerHandler.GetPartnerById(ctx, in, out)
}

func (h *partnerHandler) CreatePartner(ctx context.Context, in *CreatePartnerRequest, out *CreatePartnerResponse) error {
	return h.PartnerHandler.CreatePartner(ctx, in, out)
}

func (h *partnerHandler) UpdatePartner(ctx context.Context, in *UpdatePartnerRequest, out *UpdatePartnerResponse) error {
	return h.PartnerHandler.UpdatePartner(ctx, in, out)
}

func (h *partnerHandler) DeletePartner(ctx context.Context, in *DeletePartnerRequest, out *DeletePartnerResponse) error {
	return h.PartnerHandler.DeletePartner(ctx, in, out)
}

func (h *partnerHandler) GetPartners(ctx context.Context, in *GetPartnersRequest, out *GetPartnersResponse) error {
	return h.PartnerHandler.GetPartners(ctx, in, out)
}
