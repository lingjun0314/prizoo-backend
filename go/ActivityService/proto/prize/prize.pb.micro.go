// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: prize.proto

package prize

import (
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "go-micro.dev/v5/client"
	server "go-micro.dev/v5/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for Prize service

type PrizeService interface {
	GetPrizeById(ctx context.Context, in *GetPrizeByIdRequest, opts ...client.CallOption) (*GetPrizeByIdResponse, error)
	CreatePrize(ctx context.Context, in *CreatePrizeRequest, opts ...client.CallOption) (*CreatePrizeResponse, error)
	UpdatePrize(ctx context.Context, in *UpdatePrizeRequest, opts ...client.CallOption) (*UpdatePrizeResponse, error)
}

type prizeService struct {
	c    client.Client
	name string
}

func NewPrizeService(name string, c client.Client) PrizeService {
	return &prizeService{
		c:    c,
		name: name,
	}
}

func (c *prizeService) GetPrizeById(ctx context.Context, in *GetPrizeByIdRequest, opts ...client.CallOption) (*GetPrizeByIdResponse, error) {
	req := c.c.NewRequest(c.name, "Prize.GetPrizeById", in)
	out := new(GetPrizeByIdResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *prizeService) CreatePrize(ctx context.Context, in *CreatePrizeRequest, opts ...client.CallOption) (*CreatePrizeResponse, error) {
	req := c.c.NewRequest(c.name, "Prize.CreatePrize", in)
	out := new(CreatePrizeResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *prizeService) UpdatePrize(ctx context.Context, in *UpdatePrizeRequest, opts ...client.CallOption) (*UpdatePrizeResponse, error) {
	req := c.c.NewRequest(c.name, "Prize.UpdatePrize", in)
	out := new(UpdatePrizeResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Prize service

type PrizeHandler interface {
	GetPrizeById(context.Context, *GetPrizeByIdRequest, *GetPrizeByIdResponse) error
	CreatePrize(context.Context, *CreatePrizeRequest, *CreatePrizeResponse) error
	UpdatePrize(context.Context, *UpdatePrizeRequest, *UpdatePrizeResponse) error
}

func RegisterPrizeHandler(s server.Server, hdlr PrizeHandler, opts ...server.HandlerOption) error {
	type prize interface {
		GetPrizeById(ctx context.Context, in *GetPrizeByIdRequest, out *GetPrizeByIdResponse) error
		CreatePrize(ctx context.Context, in *CreatePrizeRequest, out *CreatePrizeResponse) error
		UpdatePrize(ctx context.Context, in *UpdatePrizeRequest, out *UpdatePrizeResponse) error
	}
	type Prize struct {
		prize
	}
	h := &prizeHandler{hdlr}
	return s.Handle(s.NewHandler(&Prize{h}, opts...))
}

type prizeHandler struct {
	PrizeHandler
}

func (h *prizeHandler) GetPrizeById(ctx context.Context, in *GetPrizeByIdRequest, out *GetPrizeByIdResponse) error {
	return h.PrizeHandler.GetPrizeById(ctx, in, out)
}

func (h *prizeHandler) CreatePrize(ctx context.Context, in *CreatePrizeRequest, out *CreatePrizeResponse) error {
	return h.PrizeHandler.CreatePrize(ctx, in, out)
}

func (h *prizeHandler) UpdatePrize(ctx context.Context, in *UpdatePrizeRequest, out *UpdatePrizeResponse) error {
	return h.PrizeHandler.UpdatePrize(ctx, in, out)
}
